
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        // http://github-api.kohsuke.org/
        classpath "org.kohsuke:github-api:1.314"
    }
}

String shell(String command) {
    def proc = ["sh", "-c", "cd ${project.rootDir} ; ${command}"].execute()
    if (proc.waitFor() != 0) {
        throw new RuntimeException("Failed to run: ${command}\n${proc.err.text}")
    } else {
        def err = proc.err.text
        if (err) {
            System.err.println(err)
        }
    }
    return proc.in.text;
}

def ext = project.rootProject.ext

task('release', dependsOn: stage) {
    doLast {
        assert ext.version
        assert ext.githubOwner
        assert ext.githubRepo
        assert ext.artifactFile.exists()
        assert ext.artifactContentType

        println("release for ${ext.version}")

        final github = org.kohsuke.github.GitHub.connect()
        final repo = github.getRepository("${ext.githubOwner}/${ext.githubRepo}")

        final message = """
            Version v${version} of ${ext.githubOwner}/${ext.githubRepo}.
        """.trim()

        final release = repo.createRelease("v${ext.version}")
            .name("v${ext.version}")
            .body(message)
            .commitish("master")
            .create();

        release.uploadAsset(ext.artifactFile, ext.artifactContentType)

        final dockerTag = "ghcr.io/${ext.githubOwner}/${ext.githubRepo}:${version}"

        shell("docker --version")

        // Use GITHUB_TOKEN for docker login
        def githubToken = System.getenv("GITHUB_TOKEN")
        if (!githubToken) {
            throw new RuntimeException("GITHUB_TOKEN environment variable is not set")
        }

        // Login to ghcr.io using token
        // For GitHub Actions, we need to use the actor name from environment variable
        def githubActor = System.getenv("GITHUB_ACTOR") ?: ext.githubOwner
        shell("echo ${githubToken} | docker login ghcr.io -u ${githubActor} --password-stdin")

        shell("docker buildx build --platform linux/amd64 -t ${dockerTag} --build-arg PLANTUML_SERVICE_VERSION=${version} .")
        shell("docker push ${dockerTag}")

        println release.getHtmlUrl()
    }
}
